import streamlit as st
import requests
import json
import re
from datetime import datetime
import os
import base64
import io
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.set_page_config(
    page_title="–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ + IMG",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
st.markdown("""
<style>
    .main > div {
        padding-top: 2rem;
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        max-width: 80%;
    }
    
    .user-message {
        background-color: #007bff;
        color: white;
        margin-left: auto;
        text-align: right;
    }
    
    .assistant-message {
        background-color: #f8f9fa;
        color: black;
        margin-right: auto;
    }
    
    .email-input {
        margin-bottom: 2rem;
    }
    
    .problem-summary {
        background-color: #e9ecef;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: #212529;
    }
    
    .problem-summary strong {
        color: #495057;
        font-weight: 600;
    }
    
    @media (max-width: 768px) {
        .main > div {
            padding: 1rem;
        }
        
        .chat-message {
            max-width: 90%;
        }
    }
</style>
""", unsafe_allow_html=True)

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def upload_to_imgbb(image_file, api_key):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_bytes = image_file.getvalue()
        image_base64 = base64.b64encode(image_bytes).decode()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ImgBB
        url = "https://api.imgbb.com/1/upload"
        payload = {
            'key': api_key,
            'image': image_base64
        }
        
        response = requests.post(url, data=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                return {
                    "success": True,
                    "url": result['data']['url'],
                    "delete_url": result['data']['delete_url']
                }
            else:
                return {"success": False, "error": result.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}
        else:
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.Timeout:
        return {"success": False, "error": "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ImgBB"}
    except requests.exceptions.ConnectionError:
        return {"success": False, "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ImgBB"}
    except Exception as e:
        return {"success": False, "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def send_to_n8n(message, chat_history, problem_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n"""
    n8n_url = os.getenv('N8N_WEBHOOK_URL')
    
    if not n8n_url:
        return {"error": "N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    payload = {
        "message": message,
        "chat_history": chat_history,
        "problem_data": problem_data
    }
    
    try:
        response = requests.post(
            n8n_url,
            json=payload,
            timeout=30,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"}
            
    except requests.exceptions.Timeout:
        return {"error": "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å n8n"}
    except requests.exceptions.ConnectionError:
        return {"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n"}
    except Exception as e:
        return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}

def display_chat_message(content, is_user):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    css_class = "user-message" if is_user else "assistant-message"
    st.markdown(f'<div class="chat-message {css_class}">{content}</div>', unsafe_allow_html=True)

def display_problem_summary(problem_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ"""
    st.markdown("### üìã –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ:")
    
    summary_data = []
    if problem_data.get('equipment_type'):
        summary_data.append(f"**–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {problem_data['equipment_type']}")
    if problem_data.get('device_number'):
        summary_data.append(f"**–ù–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:** {problem_data['device_number']}")
    if problem_data.get('description'):
        summary_data.append(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {problem_data['description']}")
    if problem_data.get('incident_date'):
        summary_data.append(f"**–î–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:** {problem_data['incident_date']}")
    if problem_data.get('photo_url'):
        photo_urls = problem_data['photo_url'].split(', ')
        if len(photo_urls) == 1:
            summary_data.append(f"**–§–æ—Ç–æ:** [{photo_urls[0]}]({photo_urls[0]})")
        else:
            photo_links = [f"[–§–æ—Ç–æ {i+1}]({url})" for i, url in enumerate(photo_urls)]
            summary_data.append(f"**–§–æ—Ç–æ:** {', '.join(photo_links)}")
    
    if summary_data:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.markdown —Å markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π –≤–º–µ—Å—Ç–æ HTML
        summary_text = '\n\n'.join(summary_data)
        st.markdown(f'<div class="problem-summary">{summary_text}</div>', unsafe_allow_html=True)
    else:
        st.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞")

def main():
    st.title("üîß –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'email' not in st.session_state:
        st.session_state.email = None
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'problem_data' not in st.session_state:
        st.session_state.problem_data = {}
    if 'show_summary' not in st.session_state:
        st.session_state.show_summary = False
    if 'uploaded_photos' not in st.session_state:
        st.session_state.uploaded_photos = []
    if 'message_counter' not in st.session_state:
        st.session_state.message_counter = 0
    
    # –í–≤–æ–¥ email
    if not st.session_state.email:
        st.markdown("### üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        email = st.text_input("Email:", placeholder="example@company.com", key="email_input")
        
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", type="primary"):
            if email and validate_email(email):
                st.session_state.email = email
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ email –∏ –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã
        col1, col2 = st.columns([3, 1])
        with col1:
            st.success(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –∫–∞–∫: {st.session_state.email}")
        with col2:
            if st.button("–°–º–µ–Ω–∏—Ç—å email"):
                st.session_state.email = None
                st.session_state.chat_history = []
                st.session_state.problem_data = {}
                st.session_state.show_summary = False
                st.session_state.uploaded_photos = []
                st.session_state.message_counter = 0
                st.rerun()
        
        # –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.markdown("### üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        for message in st.session_state.chat_history:
            display_chat_message(message['content'], message['is_user'])
        
        # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not st.session_state.show_summary:
            user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É...", key=f"user_input_{st.session_state.message_counter}")
            
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary") and user_input:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.chat_history.append({
                    "content": user_input,
                    "is_user": True
                })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                    response = send_to_n8n(
                        user_input,
                        st.session_state.chat_history,
                        st.session_state.problem_data
                    )
                
                if "error" in response:
                    st.error(f"–û—à–∏–±–∫–∞: {response['error']}")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                    if 'problem_data' in response:
                        st.session_state.problem_data.update(response['problem_data'])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    if 'response' in response:
                        st.session_state.chat_history.append({
                            "content": response['response'],
                            "is_user": False
                        })
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
                st.session_state.message_counter += 1
                st.rerun()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á ImgBB –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        imgbb_api_key = os.getenv('IMGBB_API_KEY')
        
        if imgbb_api_key:
            uploaded_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
                type=['png', 'jpg', 'jpeg'],
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG",
                key="image_uploader"
            )
            
            if uploaded_file is not None:
                if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type="primary"):
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB..."):
                        result = upload_to_imgbb(uploaded_file, imgbb_api_key)
                    
                    if result["success"]:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        photo_info = {
                            "url": result["url"],
                            "delete_url": result["delete_url"],
                            "filename": uploaded_file.name,
                            "upload_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        }
                        st.session_state.uploaded_photos.append(photo_info)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º problem_data —Å URL —Ñ–æ—Ç–æ
                        if st.session_state.uploaded_photos:
                            photo_urls = [photo["url"] for photo in st.session_state.uploaded_photos]
                            st.session_state.problem_data["photo_url"] = ", ".join(photo_urls)
                        
                        st.success(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
                        st.info(f"üîó URL: {result['url']}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ photo_url
                        if st.session_state.problem_data.get("photo_url"):
                            st.success(f"üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞—è–≤–∫—É: {st.session_state.problem_data['photo_url']}")
                        
                        st.rerun()
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['error']}")
        else:
            st.warning("‚ö†Ô∏è IMGBB_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
        if st.session_state.uploaded_photos:
            st.markdown("#### üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            for i, photo in enumerate(st.session_state.uploaded_photos):
                col1, col2, col3 = st.columns([3, 1, 1])
                with col1:
                    st.write(f"**{photo['filename']}**")
                    st.write(f"üïí {photo['upload_time']}")
                    st.write(f"üîó [–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({photo['url']})")
                with col2:
                    st.image(photo['url'], width=100)
                with col3:
                    if st.button("üóëÔ∏è", key=f"delete_{i}", help="–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
                        st.session_state.uploaded_photos.pop(i)
                        # –û–±–Ω–æ–≤–ª—è–µ–º problem_data
                        if st.session_state.uploaded_photos:
                            photo_urls = [photo["url"] for photo in st.session_state.uploaded_photos]
                            st.session_state.problem_data["photo_url"] = ", ".join(photo_urls)
                        else:
                            st.session_state.problem_data["photo_url"] = ""
                        st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ
        display_problem_summary(st.session_state.problem_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        required_fields = ['equipment_type', 'device_number', 'description', 'incident_date']
        missing_fields = [field for field in required_fields if not st.session_state.problem_data.get(field)]
        
        if not missing_fields and not st.session_state.show_summary:
            st.session_state.show_summary = True
            st.rerun()
                
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if st.session_state.show_summary:
            st.markdown("### ‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            st.markdown("**Email:** " + st.session_state.email)
            display_problem_summary(st.session_state.problem_data)
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", type="primary"):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                        final_response = send_to_n8n(
                            "done-request",
                            st.session_state.chat_history,
                            st.session_state.problem_data
                        )
                    
                    if "error" in final_response:
                        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {final_response['error']}")
                    else:
                        st.success("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.session_state.chat_history = []
                        st.session_state.problem_data = {}
                        st.session_state.show_summary = False
                        st.session_state.uploaded_photos = []
                        st.session_state.message_counter = 0
                        st.rerun()
            
            with col2:
                if st.button("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥"):
                    st.session_state.show_summary = False
                    st.rerun()

if __name__ == "__main__":
    main()
